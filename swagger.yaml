swagger: "2.0"
info:
  title: Dekh Tamasha - A Movie Rating API
  description: Watch movies that are worth your time
  version: 0.0.1
host: dekh-tamasha-movie-app.herokuapp.com
basePath: /api
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json

definitions:
  Movie:
    properties:
      movieId:
        type: integer
        example: 125
      99popularity:
        type: number
        example: 78.0
      director:
        type: string
        example: Bret Ratner
      genre:
        type: array
        items:
          example: "Comedy"
      imdbScore:
        type: number
        example: 7.0
      name:
        type: string
        example: Rush Hour
    required:
      - 99popularity
      - director
      - genre
      - imdbScore
      - name
  User:
    properties:
      userId:
        type: integer
        example: 001
      firstName:
        type: string
        example: Jackie
      userName:
        type: string
        example: chanjackie
      email:
        type: string
        example: chanjackie@fynd.com
      accessRole:
        type: string
        example: User
    required:
      - fullName
      - loginName
      - email
      - accessRole
  Message:
    properties:
      message:
        type: string
        example: Some message

paths:
  /movies:
    get:
      operationId: resources.movie_resource.get_all
      tags:
        - View Movies
      summary: Detailed list of all Movies
      description: View all the movies
      parameters:
        - in: query
          name: _limit
          type: integer
          description: To number limit search records
          required: False
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Movie"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Message"
        504:
          description: Gateway Timeout
          schema:
            $ref: "#/definitions/Message"

  /movies/movie-name/{search_name}:
    get:
      operationId: resources.movie_resource.search_by_name
      tags:
        - Search Movies By Name
      summary: Search Movies By Name
      description: Searching movies by name
      parameters:
        - in: path
          name: search_name
          type: string
          description: movie name
          required: True
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Movie"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Message"
        504:
          description: Gateway Timeout
          schema:
            $ref: "#/definitions/Message"

  /movies/director-name/{search_director}:
    get:
      operationId: resources.movie_resource.search_by_director
      tags:
        - Search Movies By Director
      summary: Search Movies By Director
      description: Searching movies by director
      parameters:
        - in: path
          name: search_director
          type: string
          description: movie name
          required: True
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Movie"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Message"
        504:
          description: Gateway Timeout
          schema:
            $ref: "#/definitions/Message"

  /users:
    get:
      operationId: resources.user_resource.get_all
      tags:
        - View Users
      summary: Detailed list of all Users
      description: View all the users
      parameters:
        - in: query
          name: _limit
          type: integer
          description: To number limit search records
          required: False
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Message"
        504:
          description: Gateway Timeout
          schema:
            $ref: "#/definitions/Message"

  /movie:
    post:
      operationId: resources.movie_resource.add_movie
      tags:
        - Add Movie
      summary: Add A Movie
      description: Adding movie details
      parameters:
        - in: body
          name: movie_json
          description: The user to create.
          required: True
          schema:
            $ref: "#/definitions/Movie"
        - in: query
          name: _limit
          type: integer
          required: False
      responses:
        201:
          description: CREATED
          schema:
            type: object
            properties:
              movieId:
                type: integer
              movieName:
                type: string
        400:
          description: BAD REQUEST
          schema:
            $ref: "#/definitions/Message"

  /movie/{movie_id}:
    get:
      operationId: resources.movie_resource.get_movie_by_id
      tags:
        - Get Movie
      summary: Get A Movie
      description: Getting movie by id
      parameters:
        - in: path
          name: movie_id
          type: integer
          required: True
      responses:
        200:
          description: CREATED
          schema:
            $ref: "#/definitions/Movie"
        400:
          description: BAD REQUEST
          schema:
            $ref: "#/definitions/Message"

    put:
      operationId: resources.movie_resource.edit_by_id
      tags:
        - Edit Movie
      summary: Edit A Movie
      description: Editting a movie by id
      parameters:
        - name: movie_id
          in: path
          type: integer
          required: True
        - name: movie_json
          in: body
          schema:
            $ref: "#/definitions/Movie"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Movie"

    delete:
      operationId: resources.movie_resource.delete_by_id
      tags:
        - Delete Movie
      summary: Delete A Movie
      description: Deleting a movie by id
      parameters:
        - in: path
          name: movie_id
          type: integer
          description: movieId to delete
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Message"
        400:
          description: BAD REQUEST
          schema:
            $ref: "#/definitions/Message"

  /movie/get-top-movies-by-popularity:
    get:
      operationId: resources.movie_resource.get_top_movies_by_popularity
      tags:
        - Get Top Movies By Popularity
      summary: Get Top 3 Movies By Popularity
      description: Getting top 3 movies by popularity
      parameters:
        - in: query
          name: _limit
          type: integer
          description: To number limit search records
      responses:
        200:
          description: CREATED
          schema:
            $ref: "#/definitions/Movie"
        400:
          description: BAD REQUEST
          schema:
            $ref: "#/definitions/Message"

  /movie/get-top-movies-by-imdb:
    get:
      operationId: resources.movie_resource.get_top_movies_by_imdb
      tags:
        - Get Top Movies By IMDB
      summary: Get Top 3 Movies By IMDB
      description: Getting top 3 movies by imdb
      parameters:
        - in: query
          name: _limit
          type: integer
          description: To number limit search records
      responses:
        200:
          description: CREATED
          schema:
            $ref: "#/definitions/Movie"
        400:
          description: BAD REQUEST
          schema:
            $ref: "#/definitions/Message"
